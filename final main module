#include<stdio.h>
#include<sys/types.h>
#include<sys/shm.h>
#include<sys/ipc.h>
#include "headsem.h"
#include "headfork.h"

int main()
{

     int c;
     printf("\n\n\t\tWelcome to the E-learning sofware of process sychronizatioi\n\n\n");
     printf("\n Enter the tpic choice you want to learn");
     printf("\n1. Semaphore");
     printf("\n2. Busy waiting");
     printf("\n3. Spin Lock");
     printf("\n4. Critical section");
     scanf("%d",&c);
     switch(c)
     {
	case 1:
		printf("A useful way to think of a semaphore is as a record of how many units of a particular resource are available, coupled with operations to safely (i.e., without race conditions) adjust that record as units are required or become free, and, if necessary, wait until a unit of the resource becomes available. Semaphores are a useful tool in the prevention of race conditions; however, their use is by no means a guarantee that a program is free from these problems. Semaphores which allow an arbitrary resource count are called counting semaphores, while semaphores which are restricted to the values 0 and 1 (or locked/unlocked, unavailable/available) are called binary semaphores.");
                /* global thread exit control flag */
volatile uint32_t g_ExitFlag = 0;

/* global thread execution control semaphore */
sem_t g_Sem;

/* the thread function */
void *ThreadFunc(void *pContext)
{
    uint32_t tid = (uint32_t)pContext;

    /* main thread loop */
    while (g_ExitFlag == 0)
    {
        /* wait for semaphore to be signalled */
        sem_wait(&g_Sem);
        printf("Thread %d running.\n", tid);
    }

    printf("Thread %d exiting.\n", tid);

    return NULL;
}

    uint32_t i = 0;
    pthread_t th;

    /* suppress warnings */
    (void)argc;
    (void)argv;

    /* initialize the semaphore */
    sem_init(&g_Sem, 0, 0);

    /* create and detach several threads */
    for (i = 0; i < NUM_THREADS; ++i)
    {
        pthread_create(&th, NULL, ThreadFunc, (void *)i);
        pthread_detach(th);
    }

    /* run each thread four times and exit */
    for (i = 0; i < (NUM_THREADS * 4); ++i)
    {
        if (i == 15)
        {
            g_ExitFlag = 1;
        }

        /* release a thread to execute */
        sem_post(&g_Sem);
        sleep(1);
    }

    break;

	case 2: 
		printf("In software engineering, busy-waiting or spinning is a technique in which a process repeatedly checks to see if a condition is true, such as whether keyboard input or a lock is available. Spinning can also be used to generate an arbitrary time delay, a technique that was necessary on systems that lacked a method of waiting a specific length of time. Processor speeds vary greatly from computer to computer, especially as some processors are designed to dynamically adjust speed based on external factors, such as the load on the operating system. As such, spinning as a time delay technique often produces unpredictable or even inconsistent results unless code is implemented to determine how quickly the processor can execute a "do nothing" loop.");
	        id = fork();
for (i = 0; i < 20; i++)
{
    switch (id)
    {
             case 0:
                /* do stuff with child */
                exit(0);
             default:
             {
                 if (children>=3) {
                     int s;
                     wait(&s);
                     children--;
                 }
                 children++;
                 id = fork();
             }
    }
}
break;
	

case 3:
 		printf("In software engineering, a spinlock is a lock which causes a thread trying to acquire it to simply wait in a loop ("spin") while repeatedly checking if the lock is available. Since the thread remains active but is not performing a useful task, the use of such a lock is a kind of busy waiting. Once acquired, spinlocks will usually be held until they are explicitly released, although in some implementations they may be automatically released if the thread being waited on (that which holds the lock) blocks, or "goes to sleep".");
	        int min,np,a[10];
    int *lock1,*finalmin;
    int id,n,i,sid1,sid2;

    sid1=shmget(IPC_PRIVATE,10,0666|IPC_CREAT);
    lock1=(int *)shmat(sid1,0,0);

    sid2=shmget(IPC_PRIVATE,10,0666|IPC_CREAT);
    finalmin=(int *)shmat(sid2,0,0);

// *finalmin=0;

    printf("Enter the size of array :");
    scanf("%d",&n);

    printf("Enter the array elements :");
    for(i=0;i<n;i++)
        scanf("%d",&a[i]);

    printf("Enter the no.of proc :");
    scanf("%d",&np);

    lock_init(lock1);

    id=p_fork(np);
    min=a[0];
    
    for(i=id;i<n;i+=np)
    {
        if(a[i]<min)
            min=a[i];
    }

    locksem(lock1);
    *finalmin=min;
    if(min < *finalmin)
        *finalmin=min;

    unlock(lock1);

    p_join(np,id);
    printf("minimum : %d",*finalmin);
break;


case 4:  
         printf("\nIn concurrent programming, a critical section is a piece of code that accesses a shared resource (data structure or device) that must not be concurrently accessed by more than one thread of execution.[1] A critical section will usually terminate in fixed time, and a thread, task, or process will have to wait for a fixed time to enter it (aka bounded waiting). Some synchronization mechanism is required at the entry and exit of the critical section to ensure exclusive use, for example a semaphore.");
	         cnt++;
printf ("%d. Now we are in CTRL_C_Handler.\n", cnt);
(void) signal (SIGINT, CTRL_C_Handler);
} // end method CRTL_C_Handler


system ("clear");

(void) signal (SIGINT, CTRL_C_Handler);
sigset_t masking;

cnt=0;
sigemptyset (&masking);
sigaddset (&masking, SIGINT);

if (sigprocmask (SIG_BLOCK, &masking, NULL) == -1)
printf ("An error encountered: %s.\n", strerror(errno));

printf ("Enterend in Critical Section. Last for 5 seconds.\n");
printf ("Pressing CTRL-C will be useless.\n");
sleep(5);

printf ("Critical Section is ending now.\n");
if (sigprocmask (SIG_UNBLOCK, &masking, NULL) == -1)
printf ("An error encountered: %s.\n", strerror(errno));

while(1);

}
system("pause"); 
break;
        


case 5: printf("\n Wrong choice");
}
return 0;
}
